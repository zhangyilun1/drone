#include <sys/types.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <unistd.h>
#include <iostream>
#include <string.h>
#include <fcntl.h>
#include <thread>
#define SERVER_ADDRESS "127.0.0.1"
#define SERVER_PORT 32321
#define SEND_DATA "0a 00 0d 05 00 00 00 00 00 00 004144303046"
#define SEND_DATA2 "hello_world"

std::mutex sendMutex;
std::mutex receiveMutex;

void sendData(int clientfd)
{
    std::cout << "sendData . " << std::endl;
    unsigned char data[] = {0x0a, 0x00, 0x39, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x41, 0x44, 0x30, 0x30, 0x46, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x4d, 0x33, 0x30, 0x54, 0x07, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55,
    0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x00, 0x00, 0x20, 0x41, 0x05, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x31, 0x2e, 0x30, 0x2e, 0x30};
    unsigned char data2[] = {0x0b, 0x19, 0x64, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
                             0x00, 0x00, 0x2d, 0x31, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                             0x54, 0x79, 0x70, 0x65, 0x20, 0x42, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
                             0x00, 0x00, 0x4c, 0x65, 0x6e, 0x73, 0x20, 0x32, 0x06, 0x00, 0x00, 0x00,
                             0x00, 0x00, 0x00, 0x00, 0x32, 0x30, 0x6b, 0x6d, 0x2f, 0x68, 0x05, 0x00,
                             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0x2e, 0x31, 0x2e, 0x31};
    unsigned char data3[] = {0x04, 0x00, 0x18, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xee, 0x2c, 0xe3, 0x64, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe7, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                             0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x50, 0x05, 0xda,
                             0x04, 0x03, 0x00, 0x00, 0x00, 0x50, 0x05, 0xda, 0x04, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                             0x00, 0x00, 0x00, 0x00};

                            //  {0x69,0x54,0xe8,0x64}
    while (true)
    {
        std::lock_guard<std::mutex> lock(sendMutex);
        // int ret = send(clientfd, SEND_DATA, strlen(SEND_DATA), 0);
        int ret = send(clientfd, data, sizeof(data), 0);

        if (ret == -1)
        {
            std::cout << "send data error." << std::endl;
            break;
        }
        // std::cout << "send success . " << SEND_DATA << std::endl;
        // Send data every 1 second
        sleep(2);
    }
}

void receiveData(int clientfd)
{
    std::cout << "receiveData . " << std::endl;

    while (true)
    {
        std::lock_guard<std::mutex> lock(receiveMutex);
        // int len = send(clientfd, SEND_DATA2, sizeof(SEND_DATA2), 0);
        // if (len > 0) {
        uint8_t buff[1024]; 
        int len = recv(clientfd, buff, sizeof(buff), MSG_DONTWAIT);
        //std::cout << "Received data from server: " << buff << std::endl;
        int cmd = buff[0];
        std::cout << "cmd: " << cmd << std::endl;
        // if(buff == "success !!!" )
        // {
        //     //std::lock_guard<std::mutex> lock(sendMutex);
        //     int ret = send(clientfd, SEND_DATA2, strlen(SEND_DATA2), 0);
        //     std::cout << "send to server: " << SEND_DATA2 << std::endl;
        // }
        // else
        // {
        //     //std::lock_guard<std::mutex> lock(sendMutex);
        //     int ret = send(clientfd, "rewrite", strlen("rewrite"), 0);
        //     std::cout << "send to server: " << "rewrite" << std::endl;
        // }

        buff[len] = '\0'; // Null-terminate received data
        // }
        // usleep(100000); // Sleep for 100ms
        // memset(buff, 0, sizeof(buff));

        sleep(10);
    }
}

int main()
{

    int clientfd = socket(AF_INET, SOCK_STREAM, 0);
    // cout << "begin connect" << endl;
    if (clientfd == -1)
    {
        std::cout << "create client socket error." << std::endl;
        close(clientfd);
        return -1;
    }
    // cout << "great" << endl;
    // 2.连接服务器
    struct sockaddr_in serveraddr;
    serveraddr.sin_family = AF_INET;
    serveraddr.sin_addr.s_addr = inet_addr(SERVER_ADDRESS);
    serveraddr.sin_port = htons(SERVER_PORT);
    // cout << "great" << endl;
    if (connect(clientfd, (struct sockaddr *)&serveraddr, sizeof(serveraddr)) == -1)
    {
        std::cout << "connect socket error." << std::endl;
        return -1;
    }
    int oldSocketFlag = fcntl(clientfd, F_GETFL, 0);
    int newSocketFlag = oldSocketFlag | O_NONBLOCK;
    // cout << "great" << endl;
    if (fcntl(clientfd, F_SETFL, newSocketFlag) == -1)
    {
        close(clientfd);
        // std::TRACE( "set socket to nonblock error." );
        return -1;
    }

    // Create threads for sending and receiving
    std::thread sendThread(sendData, clientfd);
    std::thread receiveThread(receiveData, clientfd);

    sendThread.join();
    receiveThread.join();

    // Close socket and clean up
    close(clientfd);

    return 0;
}